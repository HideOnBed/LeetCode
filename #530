First idea:
Every node's left child's rightmost child's value and every node's right child's leftmost child' value are closest to the node's val, so 
to compute everynode's minimum diff and get the result.
It's too complicate, so I gave up;

Second idea:
Use InOrder traverse. The tree's nodes' values are got by ascending order when we traverse the BST by inOrder. So I apply an array to store
these values and an index point to the previous position, so the diff = array[index] - array[index-1]

class Solution {
    public int[] a = new int[10000];
    public int index = 0;
    public int min = Integer.MAX_VALUE;
    public int getMinimumDifference(TreeNode root) {
        inOrder(root);
        return min;
    }
    
    public void inOrder(TreeNode root){
        if(min == 1) return;
        if(root == null){
            return;
        }else{
            inOrder(root.left);
            a[index] = root.val;
            if(index > 0){
                if(a[index] - a[index-1] < min) min = a[index] - a[index-1];
            }
            index++;
            inOrder(root.right);
        }
    }
}

Better way: 
We can apply an Integer variable to replace the array and index, just use the variable to store the previous node's value;
